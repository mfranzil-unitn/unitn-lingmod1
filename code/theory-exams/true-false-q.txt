V	Di default l’operatore == e il metodo equals fanno la stessa cosa.
V	Due oggetti per cui equals è vero possono avere variabili pubbliche con valori differenti
F	Due oggetti per cui equals è vero sono sempre identici
V	E' corretto scrivere Integer k = 3;
F	Ereditarietà multipla è permessa con le interfacce e le classi astratte.
V	Gli identificatori di oggetto sono concettualmente equivalenti ai puntatori
F	Il costruttore chiama automaticamente il costruttore della superclasse con gli stessi parametri. Se nella superclasse non è disponibile un costruttore con la stessa firma, viene chiamato il costruttore vuoto.
V	Il costruttore di una classe può non essere visibile ali'esterno della classe stessa.
F	Il garbage collector di Java sospende l’esecuzione del programma finchè non ha finito di liberare la memoria.
F	Il main può accedere a qualunque variabile di istanza della classe in cui è contenuto.
F	Il main può sempre accedere a qualunque variabile di istanza della classe in cui è contenuto.
F	Il metodo finalize() chiama automaticamente il corrispondente metodo della superclasse
F	In C++ le variabili globali non stanno nè in Heap nè in Stack
F	In Java esiste ereditarietà multipla
F	In Java non esistono le variabili globali
V	In un progetto ci possono essere più classi con lo stesso nome
V	In un progetto ci possono essere tanti metodi public static void main(String a[]);
V	In un programma ci possono essere più classi con lo stesso nome
F	In un programma ci può essere un solo metodo public static void main(String[] args)
F	In una classe ci può essere un solo metodo chiamato main
V	int a[] è un oggetto
F	Java usa solo la heap e non lo stack
F	Java usa solo la heap perché tutta la memoria è allocata dinamicamente con le new()
F	L’esistenza in una classe di un metodo f(int x), e in una sua superclasse di un metodo f(float x) è un esempio di overriding
F	L’esistenza in una classe di un metodo f(int x), e in una sua superclasse di un metodo f(String s) è un esempio di overriding
F	Le variabili dichiarate static non sono modificabili dai metodi privati
V	L'esistenza in una classe di un metodo f(int x) e di uno f(String s) è un esempio di overloading
V	L'esistenza in una classe di un metodo f(int x) e di uno f(String s) in una sua sottoclasse è un esempio di overloading
V	Nei metodi statici non è possibile leggere e scrivere le variabili di istanza
	Nel main non posso definire variabili non statiche
F	Nel main si può leggere una qualunque variabile di istanza della classe in cui è contenuto.
F	Non è possibile chiamare il metodo equals su una classe generica a meno che essa non dichiari l’interfaccia Comparable
V	Non è possibile istanziare una Collection
F	Poichè Java usa sempre dynamic binding, esso usa sempre la heap e mai lo stack.
F	Se A è padre di B la scrittura B a=(B)(new A()); genera errore a compile time
F	Se A è padre di B la scrittura B a=new A(); genera errore a runtime
F	Se a.equals(b) è falso, deve essere a.hashCode!=b.hashCode
V	Se a.equals(b) è vero, deve essere a.hashCode()==b.hashCode()
V	Se a.hashCode()!=b.hashCode(), a.equals(b) deve essere falso
F	Se a.hashCode()==b.hashCode(), a.equals(b) deve essere vero
F	Se B estende A la scrittura B a=new A(); genera errore a compile time
F	Se di un metodo f faccio overloading non è detto che ci siano più “signatures” (firme) di metodi legate al nome f
V	Se di un metodo f faccio overriding non è detto che ci siano più “signatures” (firme) di metodi legate al nome f
F	Se una classe è astratta è permesso usarla per effettuare ereditarietà multipla
	Se una Collection è specializzata tramite una generic gli oggetti estratti dal relativo iteratore non richiedono un cast.
F	Una classe astratta può implementare al massimo una interfaccia
F	Una classe figlia può fare l'overriding di un metodo final della classe padre
V	Una classe figlia può fare overloading di un metodo final della classe padre
V	Una Interface non può ereditare da una classe
F	Una Interface può estendere una classe
V	Nei metodi static non è possibile leggere e scrivere le variabili d'istanza
V	Si consideri un attributo x dichiarato come protected nella classe C del package P1; x non è visibile da una classe D appartenente a un package P2, a meno che D non erediti da C.
F	Si consideri un attributo x dichiarato come protected nella classe C del package P1; x è visibile da un'altra classe D appartenente allo stesso package P1, solo se D eredita da C.
F	In Java esiste ereditarietà singola: quindi, un tipo interfaccia può ereditare da un solo tipo interfaccia.
F	Sia I un interfaccia, e C una classe che la implementa. L'assegnamento C c = new I(); non causa errori in compilazione, ma può generare errori a runtime.
F	Un metodo generico è un qualsiasi metodo che contiene parametri di tipo Object nella propria definizione.
F	Il costruttore di una classe chiama automaticamente il costruttore della superclasse con gli stessi parametri; se in questa non è disponibile un costruttore con la stessa firma, viene chiamato il costruttore senza parametri.
	
	
	
